AlgoViz::clear();

MouseState maus;

SVG view = SVG(700, 500, "Level 1");
Image backround = Image("erste_uni.jpg",350,250,700,500,&view);
view.drawRect(0,0,700,500);
view.drawRect(110,0,80,500);

view.setStatusMsg("Drücken Sie x zu beenden!");

Text anzeigeL = Text("Leben: 3", 15, 20, &view);
Text anzeigeP = Text("Punkte: 0", 15, 37, &view);
Text levelUp = Text("!!Achtung!! Es wird schneller", 290, 100, &view);
levelUp.setColor("red");
levelUp.hide();
view.drawRect(110,400,80,80);

//Spieler
Protagonist mario = Protagonist(&view, &anzeigeP, &anzeigeL, 1);

Itemverwaltung bib = Itemverwaltung(1,&view);


//Karte des Levels
Level levelMap = Level(1,5,5,&view);

int feind = 5;
int muenze = 5;

bool blockade = false; // Einmal gedrückt, ist der Sprung vorerst nicht beeinflussbar...man kann aber "Supersprung" aktivieren
bool blockade2 = false; // Blockiert jegliche Aktionen während des Runterspringens
string taste = "";
bool supersprungB = false;


int i = 0;
int zaehler = 0;
int kollisionZ = 0;
int yOben;
int yObenFix;
double vZaehler = 1;
//double zaehlerUnten1 = 0;
double zaehlerUnten2 = 0;
int keinBildwechselZ = 0;

while ( mario.getLeben() > 0 ) {
    
    bib.moveItems();
    bib.kollision(mario);
    
   /*if ( zaehlerUnten1 >= 400 ) {
        
        if (levelMap.getEbene2() == 1) {
            levelMap.add(1);
        }
        zaehlerUnten1 = 0;
        zweihundert = true;
    }
    
    if ( zaehlerUnten1 >= 200 && zweihundert == true ) {
        
        if (levelMap.getEbene2() == 1) {
            levelMap.add(1);
        }
        zaehlerUnten1 = 0;
        zweihundert = false;
    }*/

    //Wenn die Karte zu ende es, wird sie von vorne wiederbefüllt
    
    if ( zaehlerUnten2 >= 300 ) {
        
        levelUp.hide();
        
        zaehler++;
        if ( zaehler == 30 ) {
            
            cout << "Level up!" << endl;
            
            zaehler = 0;
            
            muenze = muenze + 3;
            feind = feind + 3;
            levelMap.buildLevel(muenze, feind);
            
            levelUp.show();
            
            double neuV = levelMap.getV() + 0.25;
            vZaehler = neuV;
            levelMap.setV(neuV);
            mario.setV(neuV);
            
        }
          
       int ebene1 = levelMap.getEbene1();
       if ( ebene1 == 1) {

           levelMap.add(0);
        
       } else if ( ebene1 == 2) {
           
            bib.addItem(0,1);
        
       } else if ( ebene1 == 3) {
           
            bib.addItem(0,2);
           
       } else if ( ebene1 == 4 ) {
           
            bib.addItem(0,0);
           
       }
        
       int ebene2 = levelMap.getEbene2();
       if ( ebene2 == 1 ) {
           
           levelMap.add(1);
           
       } else if ( ebene2 == 2) {
           
            bib.addItem(1,1);
        
       } else if ( ebene2 == 3) {
           
            bib.addItem(1,2);
           
       } else if ( ebene2 == 4 ) {
           
            bib.addItem(1,0);
           
       }
        
       
       int ebene3 = levelMap.getEbene3();
       if ( ebene3 == 1 ) {
           
           levelMap.add(2);
           
       } else if ( ebene3 == 2) {
           
            bib.addItem(2,1);
        
       } else if ( ebene3 == 3) {
           
            bib.addItem(2,2);
           
       } else if ( ebene3 == 4 ) {
           
            bib.addItem(2,0);
           
       }
        
       zaehlerUnten2 = 0;
        
    }
    
    levelMap.move();
    
    taste = view.lastKey();
    yOben = levelMap.woIstBoden(mario.getY());
    //cout << yOben << endl;
    mario.setYoben(yOben);

    if ( taste == "ArrowUp" && blockade2 == false ) {
        
        if ( mario.getBildwert() == 2 ) {
            mario.switchBildaktiv("ArrowUp");
            
        } else {
            
            if ( blockade == false ) {
            yObenFix = yOben;
            blockade = true;
            }
            
            mario.springenhoch();
            
            if ( mario.getY() + 70 < yObenFix - 50) { 
                blockade = false;
                blockade2 = true;
            }
        }
    } else if ( taste == "Shift" && blockade2 == false ) {
        if ( blockade == false ) {
            yObenFix = yOben;
            blockade = true;
            mario.supersprung();
            supersprungB = true;
        }
        
        mario.springenhoch();
        
        if ( mario.getY() + 280 < yObenFix - 50 ) {
            blockade = false;
            blockade2 = true;
        }
            
    } else if ( taste != "ArrowUp" && taste != "Shift" && blockade == true ) {
        
        if ( taste == " " ){
            if ( mario.getBildwert() != 3 ) {
                mario.switchBildaktiv("fight");
            }
        }
        
        if ( supersprungB == true ) {
            
            mario.springenhoch();
            
            if ( mario.getY() + 280 < yObenFix - 50 ) {
                blockade = false;
                blockade2 = true;
            }
            
        } else {
            
            mario.springenhoch();
            
            if ( mario.getY() + 70 < yObenFix - 50 ) {
                blockade = false;
                blockade2 = true;
            }
        }
    
    } else if ( (blockade2 == true) || ( blockade == false && blockade2 == false && taste != "ArrowDown") ) {
     
        if ( taste == " " ) {
            if ( mario.getBildwert() != 3 ) {
                mario.switchBildaktiv("fight");
            }
        }
        
        if ( mario.getY() < yOben - 50 ) {
            mario.springenrunter();
            //cout << mario.getY() << endl;
        }
    
        if ( mario.getY() >= yOben - 50 ) {
            blockade2 = false;
            supersprungB = false;
            mario.setSupersprung(false);
        }
    
    } else if ( taste == "ArrowDown" && blockade == false && blockade2 == false ) {
        
        mario.switchBildaktiv("ArrowDown");
        
    }

    //zaehlerUnten1 = zaehlerUnten1 + vZaehler;
    zaehlerUnten2 = zaehlerUnten2 + vZaehler;
    i++;
    
    if ( i == 50 ) {
        i = 0;
        mario.switchBildpassiv();
    }
    
    if ( mario.getBildwert() == 3 ) {
        keinBildwechselZ++;
        cout << keinBildwechselZ << endl;
        if ( keinBildwechselZ == 250 ) {
            keinBildwechselZ = 0;
            mario.switchBildaktiv("OutOfFight");
        }
    }
    
    // Hinderniskollision
    if ( kollisionZ > 0 ) {
        kollisionZ++;
        if ( kollisionZ == 250 ) {
            kollisionZ = 0;
            mario.setBlinken(false);
        }
    }

    if ( kollisionZ == 0 ) {
        int rueckgabe = levelMap.kollidiert(mario.getY(), mario.getBildwert());
        if ( rueckgabe != 600 ) {
            if ( mario.getY() < rueckgabe ) {
                mario.moveTo(rueckgabe - 50);
            } else {
                mario.moveTo(yOben - 50);
            }
            mario.setLeben(-1);
            mario.setBlinken(true);
            kollisionZ++;
        }
        
    }
    
    // Münzkollision
    //....
    
    //Feindkollision
    //...
    

}

view.setStatusMsg("Game Over!");
Rect schwarz = Rect (0,0,700,500,&view);
schwarz.setFill(48,92,232);
Image tot = Image("../img/Dungeon/Skelett.png",350,400,150,150,&view);
view.drawText("GAME OVER", 200, 150, 40, "century");
view.drawText("Punkte: " + to_string(mario.getPunkte()), 280, 230, 25, "century");
